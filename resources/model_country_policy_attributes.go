/*
countries-svc API

API documentation for countries-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CountryPolicyAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryPolicyAttributes{}

// CountryPolicyAttributes struct for CountryPolicyAttributes
type CountryPolicyAttributes struct {
	// List of allowed statuses for cities in the country
	CitiesAllowedStatuses []string `json:"cities_allowed_statuses"`
	// creation date
	CreatedAt time.Time `json:"created_at"`
	// last update date
	UpdatedAt time.Time `json:"updated_at"`
}

type _CountryPolicyAttributes CountryPolicyAttributes

// NewCountryPolicyAttributes instantiates a new CountryPolicyAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryPolicyAttributes(citiesAllowedStatuses []string, createdAt time.Time, updatedAt time.Time) *CountryPolicyAttributes {
	this := CountryPolicyAttributes{}
	this.CitiesAllowedStatuses = citiesAllowedStatuses
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCountryPolicyAttributesWithDefaults instantiates a new CountryPolicyAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryPolicyAttributesWithDefaults() *CountryPolicyAttributes {
	this := CountryPolicyAttributes{}
	return &this
}

// GetCitiesAllowedStatuses returns the CitiesAllowedStatuses field value
func (o *CountryPolicyAttributes) GetCitiesAllowedStatuses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CitiesAllowedStatuses
}

// GetCitiesAllowedStatusesOk returns a tuple with the CitiesAllowedStatuses field value
// and a boolean to check if the value has been set.
func (o *CountryPolicyAttributes) GetCitiesAllowedStatusesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CitiesAllowedStatuses, true
}

// SetCitiesAllowedStatuses sets field value
func (o *CountryPolicyAttributes) SetCitiesAllowedStatuses(v []string) {
	o.CitiesAllowedStatuses = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CountryPolicyAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CountryPolicyAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CountryPolicyAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CountryPolicyAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CountryPolicyAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CountryPolicyAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o CountryPolicyAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryPolicyAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cities_allowed_statuses"] = o.CitiesAllowedStatuses
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *CountryPolicyAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cities_allowed_statuses",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryPolicyAttributes := _CountryPolicyAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountryPolicyAttributes)

	if err != nil {
		return err
	}

	*o = CountryPolicyAttributes(varCountryPolicyAttributes)

	return err
}

type NullableCountryPolicyAttributes struct {
	value *CountryPolicyAttributes
	isSet bool
}

func (v NullableCountryPolicyAttributes) Get() *CountryPolicyAttributes {
	return v.value
}

func (v *NullableCountryPolicyAttributes) Set(val *CountryPolicyAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryPolicyAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryPolicyAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryPolicyAttributes(val *CountryPolicyAttributes) *NullableCountryPolicyAttributes {
	return &NullableCountryPolicyAttributes{value: val, isSet: true}
}

func (v NullableCountryPolicyAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryPolicyAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


