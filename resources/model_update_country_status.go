/*
countries-svc API

API documentation for countries-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateCountryStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCountryStatus{}

// UpdateCountryStatus struct for UpdateCountryStatus
type UpdateCountryStatus struct {
	Data UpdateCountryStatusData `json:"data"`
}

type _UpdateCountryStatus UpdateCountryStatus

// NewUpdateCountryStatus instantiates a new UpdateCountryStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCountryStatus(data UpdateCountryStatusData) *UpdateCountryStatus {
	this := UpdateCountryStatus{}
	this.Data = data
	return &this
}

// NewUpdateCountryStatusWithDefaults instantiates a new UpdateCountryStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCountryStatusWithDefaults() *UpdateCountryStatus {
	this := UpdateCountryStatus{}
	return &this
}

// GetData returns the Data field value
func (o *UpdateCountryStatus) GetData() UpdateCountryStatusData {
	if o == nil {
		var ret UpdateCountryStatusData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UpdateCountryStatus) GetDataOk() (*UpdateCountryStatusData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UpdateCountryStatus) SetData(v UpdateCountryStatusData) {
	o.Data = v
}

func (o UpdateCountryStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCountryStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *UpdateCountryStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCountryStatus := _UpdateCountryStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCountryStatus)

	if err != nil {
		return err
	}

	*o = UpdateCountryStatus(varUpdateCountryStatus)

	return err
}

type NullableUpdateCountryStatus struct {
	value *UpdateCountryStatus
	isSet bool
}

func (v NullableUpdateCountryStatus) Get() *UpdateCountryStatus {
	return v.value
}

func (v *NullableUpdateCountryStatus) Set(val *UpdateCountryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCountryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCountryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCountryStatus(val *UpdateCountryStatus) *NullableUpdateCountryStatus {
	return &NullableUpdateCountryStatus{value: val, isSet: true}
}

func (v NullableUpdateCountryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCountryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


