/*
countries-svc API

API documentation for countries-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CountryPoliciesCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryPoliciesCollection{}

// CountryPoliciesCollection struct for CountryPoliciesCollection
type CountryPoliciesCollection struct {
	Data []CountryPolicyData `json:"data"`
	Links PaginationData `json:"links"`
}

type _CountryPoliciesCollection CountryPoliciesCollection

// NewCountryPoliciesCollection instantiates a new CountryPoliciesCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryPoliciesCollection(data []CountryPolicyData, links PaginationData) *CountryPoliciesCollection {
	this := CountryPoliciesCollection{}
	this.Data = data
	this.Links = links
	return &this
}

// NewCountryPoliciesCollectionWithDefaults instantiates a new CountryPoliciesCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryPoliciesCollectionWithDefaults() *CountryPoliciesCollection {
	this := CountryPoliciesCollection{}
	return &this
}

// GetData returns the Data field value
func (o *CountryPoliciesCollection) GetData() []CountryPolicyData {
	if o == nil {
		var ret []CountryPolicyData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CountryPoliciesCollection) GetDataOk() ([]CountryPolicyData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CountryPoliciesCollection) SetData(v []CountryPolicyData) {
	o.Data = v
}

// GetLinks returns the Links field value
func (o *CountryPoliciesCollection) GetLinks() PaginationData {
	if o == nil {
		var ret PaginationData
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *CountryPoliciesCollection) GetLinksOk() (*PaginationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *CountryPoliciesCollection) SetLinks(v PaginationData) {
	o.Links = v
}

func (o CountryPoliciesCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryPoliciesCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *CountryPoliciesCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryPoliciesCollection := _CountryPoliciesCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountryPoliciesCollection)

	if err != nil {
		return err
	}

	*o = CountryPoliciesCollection(varCountryPoliciesCollection)

	return err
}

type NullableCountryPoliciesCollection struct {
	value *CountryPoliciesCollection
	isSet bool
}

func (v NullableCountryPoliciesCollection) Get() *CountryPoliciesCollection {
	return v.value
}

func (v *NullableCountryPoliciesCollection) Set(val *CountryPoliciesCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryPoliciesCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryPoliciesCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryPoliciesCollection(val *CountryPoliciesCollection) *NullableCountryPoliciesCollection {
	return &NullableCountryPoliciesCollection{value: val, isSet: true}
}

func (v NullableCountryPoliciesCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryPoliciesCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


