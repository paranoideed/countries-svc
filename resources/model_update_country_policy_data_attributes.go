/*
countries-svc API

API documentation for countries-svc

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the UpdateCountryPolicyDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCountryPolicyDataAttributes{}

// UpdateCountryPolicyDataAttributes struct for UpdateCountryPolicyDataAttributes
type UpdateCountryPolicyDataAttributes struct {
	// List of acceptable statuses for city in this country
	CitiesAllowedStatuses []string `json:"cities_allowed_statuses,omitempty"`
}

// NewUpdateCountryPolicyDataAttributes instantiates a new UpdateCountryPolicyDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCountryPolicyDataAttributes() *UpdateCountryPolicyDataAttributes {
	this := UpdateCountryPolicyDataAttributes{}
	return &this
}

// NewUpdateCountryPolicyDataAttributesWithDefaults instantiates a new UpdateCountryPolicyDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCountryPolicyDataAttributesWithDefaults() *UpdateCountryPolicyDataAttributes {
	this := UpdateCountryPolicyDataAttributes{}
	return &this
}

// GetCitiesAllowedStatuses returns the CitiesAllowedStatuses field value if set, zero value otherwise.
func (o *UpdateCountryPolicyDataAttributes) GetCitiesAllowedStatuses() []string {
	if o == nil || IsNil(o.CitiesAllowedStatuses) {
		var ret []string
		return ret
	}
	return o.CitiesAllowedStatuses
}

// GetCitiesAllowedStatusesOk returns a tuple with the CitiesAllowedStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCountryPolicyDataAttributes) GetCitiesAllowedStatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.CitiesAllowedStatuses) {
		return nil, false
	}
	return o.CitiesAllowedStatuses, true
}

// HasCitiesAllowedStatuses returns a boolean if a field has been set.
func (o *UpdateCountryPolicyDataAttributes) HasCitiesAllowedStatuses() bool {
	if o != nil && !IsNil(o.CitiesAllowedStatuses) {
		return true
	}

	return false
}

// SetCitiesAllowedStatuses gets a reference to the given []string and assigns it to the CitiesAllowedStatuses field.
func (o *UpdateCountryPolicyDataAttributes) SetCitiesAllowedStatuses(v []string) {
	o.CitiesAllowedStatuses = v
}

func (o UpdateCountryPolicyDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCountryPolicyDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CitiesAllowedStatuses) {
		toSerialize["cities_allowed_statuses"] = o.CitiesAllowedStatuses
	}
	return toSerialize, nil
}

type NullableUpdateCountryPolicyDataAttributes struct {
	value *UpdateCountryPolicyDataAttributes
	isSet bool
}

func (v NullableUpdateCountryPolicyDataAttributes) Get() *UpdateCountryPolicyDataAttributes {
	return v.value
}

func (v *NullableUpdateCountryPolicyDataAttributes) Set(val *UpdateCountryPolicyDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCountryPolicyDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCountryPolicyDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCountryPolicyDataAttributes(val *UpdateCountryPolicyDataAttributes) *NullableUpdateCountryPolicyDataAttributes {
	return &NullableUpdateCountryPolicyDataAttributes{value: val, isSet: true}
}

func (v NullableUpdateCountryPolicyDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCountryPolicyDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


